@using SpotifyShuffler.Database
@using SpotifyShuffler.Types
@model SpotifyShuffler.Database.User

@inject EmailAddressManager EmailManager

@if (Model == null)
{
    <ul class="navbar-nav nav ml-auto">
        <li class="nav-item">
            @Html.ActionLink("Login", "Login", "Login", new object[0], new {@class = "nav-link"})
        </li>
    </ul>
}

else
{
    <ul class="navbar-nav nav ml-auto">
        <li class="nav-item dropdown">
            <a href="#" class="nav-link dropdown-toggle" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                @Model.UserName
            </a>

            <div class="dropdown-menu" aria-labelledby="navbarDropdown">

                @{
                    EmailAddress emailAddress = await EmailManager.GetAsync(Model);

                    if (emailAddress == null)
                    {
                        @Html.ActionLink("Add Email", "CreateEmail", "CreateEmailAddress", new {}, new {@class = "dropdown-item font-weight-bold"})
                        <div class="dropdown-divider"></div>
                    }

                    else if (!emailAddress.IsConfirmed)
                    {
                        @Html.ActionLink("Confirm Email", "ConfirmEmail", "ConfirmEmailAddress", new {emailAddress.Email}, new {@class = "dropdown-item font-weight-bold"})
                        <div class="dropdown-divider"></div>
                    }
                }

                @Html.ActionLink("Settings", "Settings", "AccountSettings", new object[0], new {@class = "dropdown-item"})

                <div class="dropdown-divider"></div>
                @Html.ActionLink("Logout", "Logout", "Authentication", new object[0], new {@class = "dropdown-item"})
            </div>
        </li>
    </ul>
}